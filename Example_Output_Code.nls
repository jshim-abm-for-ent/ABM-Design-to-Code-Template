; Example NetLogo ABM Skeleton (Entrepreneurship Network)
globals [lambda alpha beta gamma reinforce-rate decay-rate avg-P network-density sys-performance policy-mode]
breed [ founders founder ]
breed [ owners owner ]
undirected-link-breed [ ties tie ]
founders-own [ nq re se resource-gain strategy ]
owners-own   [ resource-level preference ]
ties-own     [ strength last-updated-tick ]

to setup
  clear-all
  resize-world -25 25 -25 25
  set-patch-size 8
  set-default-shape founders "person"
  set-default-shape owners "circle"
  if not is-number? lambda [ set lambda 0.005 ]
  if not is-number? alpha [ set alpha 0.5 ]
  if not is-number? beta  [ set beta 0.5 ]
  if not is-number? gamma [ set gamma 0.5 ]
  if not is-number? reinforce-rate [ set reinforce-rate 0.05 ]
  if not is-number? decay-rate     [ set decay-rate 0.02 ]
  if not is-number? policy-mode    [ set policy-mode 0 ]
  create-founders 80 [
    setxy random-xcor random-ycor
    set color blue - 2
    set nq random-float 1
    set re random-float 1
    set se random-float 1
    set resource-gain 0
    set strategy one-of ["explore" "exploit" "diversify"]
  ]
  create-owners 40 [
    setxy random-xcor random-ycor
    set color green + 2
    set resource-level 0.5 + random-float 0.5
    set preference one-of ["quality" "trust" "structure"]
  ]
  ask founders [
    let cands n-of 3 owners
    foreach cands [ o ->
      if random-float 1 < 0.10 [
        create-tie-with o [
          set strength 0.3 + random-float 0.4
          set last-updated-tick ticks
          set color gray
        ]
      ]
    ]
  ]
  update-embeddedness
  update-metrics
  reset-ticks
end

to go
  ask founders [
    act
    interact
  ]
  decay-ties
  update-embeddedness
  update-metrics
  tick
  if ticks >= 500 [ stop ]
end

to act
  if any? my-ties [
    let ow one-of [end2] of my-ties
    let p resource-acquire-prob self ow
    ifelse (random-float 1 < p) [
      set resource-gain resource-gain + 0.1
      ask tie-with ow [
        set strength strength + reinforce-rate
        set last-updated-tick ticks
      ]
      ask ow [ set resource-level max list 0 (resource-level - 0.1) ]
    ][
      ask tie-with ow [ set strength max list 0 (strength - 0.02) ]
    ]
  ]
end

to interact
  ask ties with [ strength < 0.01 ] [ die ]
end

to-report resource-acquire-prob [ e ow ]
  let NQ [nq] of e
  let RE embeddedness-relational e
  let SE embeddedness-structural e
  let inner (lambda * (NQ ^ alpha) * (RE ^ beta) * ((SE + 1) ^ gamma))
  report 1 - exp (-1 * inner)
end

to-report embeddedness-relational [ e ]
  let ts [ties] of e
  ifelse any? ts [ report mean [strength] of ts ] [ report 0.01 ]
end

to-report embeddedness-structural [ e ]
  let deg count [end2] of [ties] of e
  report deg / (count turtles)
end

to decay-ties
  ask ties [
    set strength strength * (1 - decay-rate)
    if (ticks - last-updated-tick) > 20 [
      set strength strength * 0.5
      set last-updated-tick ticks
    ]
  ]
end

to update-embeddedness
  ask founders [
    set re embeddedness-relational self
    set se embeddedness-structural self
  ]
end

to update-metrics
  if any? founders [
    set avg-P mean [ resource-acquire-prob self one-of owners ] of founders
  ]
  set network-density calc-density
  set sys-performance sum [resource-gain] of founders
end

to-report calc-density
  ifelse (count turtles < 2) [ report 0 ]
  [ report (2 * count ties) / ((count turtles) * (count turtles - 1)) ]
end

to apply-policy
  if policy-mode = 1 [ ]
  if policy-mode = 2 [
    ask owners [ set resource-level resource-level + 0.1 ]
  ]
end

to run-experiment [ reps ]
  repeat reps [
    setup
    repeat 500 [ go ]
  ]
end
